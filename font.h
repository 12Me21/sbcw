//////////
// Font //
//////////

namespace Font {
	#define FONT_START 32
	//Font: "Tom Thumb" (https://robey.lag.net/2010/01/23/tiny-monospace-font.html)
	//I've modified ~ # & @ to be 4px wide and more readable, and [ ] to be 2px wide.
	//data is big endian, from bit 23 to bit 0
	const uint32_t data[] = {
		//0b111111111111111000000000, //invalid char
		0b000000000000000000000000, //space
		0b111010000000000000000000, //!
		0b101101000000000000000000, //"
		0b010111110101111101010000, //#
		0b011110011110010000000000, //$
		0b100001010100001000000000, //%
		0b110011000101101001010000, //&
		0b110000000000000000000000, //'
		0b011010100100000000000000, //(
		0b100101011000000000000000, //)
		0b101010101000000000000000, //*
		0b000010111010000000000000, //+
		0b000000011000000000000000, //,
		0b000000111000000000000000, //-
		0b000010000000000000000000, //.
		0b001001010100100000000000, // /
		0b011101101101110000000000, //0
		0b011101010100000000000000,
		0b110001010100111000000000,
		0b110001010001110000000000,
		0b101101111001001000000000,
		0b111100110001110000000000,
		0b011100111101111000000000,
		0b111001010100100000000000,
		0b111101111101111000000000,
		0b111101111001110000000000, //9
		0b010100000000000000000000, //:
		0b000100011000000000000000, //;
		0b001010100010001000000000, //<
		0b000111000111000000000000, //=
		0b100010001010100000000000, //>
		0b111001010000010000000000, //?
		0b011011111011100001100000, //@
		0b010101111101101000000000, //A
		0b110101110101110000000000, 
		0b011100100100011000000000,
		0b110101101101110000000000,
		0b111100111100111000000000,
		0b111100111100100000000000,
		0b011100111101011000000000,
		0b101101111101101000000000,
		0b111010010010111000000000,
		0b001001001101010000000000,
		0b101101110101101000000000,
		0b100100100100111000000000,
		0b101111111101101000000000,
		0b101111111111101000000000,
		0b010101101101010000000000,
		0b110101110100100000000000,
		0b010101101111011000000000,
		0b110101111110101000000000,
		0b011100010001110000000000,
		0b111010010010010000000000,
		0b101101101101011000000000,
		0b101101101010010000000000,
		0b101101111111101000000000,
		0b101101010101101000000000,
		0b101101010010010000000000,
		0b111001010100111000000000, //Z
		0b111010101100000000000000, //[
		0b000100010001000000000000, //backslash
		0b110101011100000000000000, //]
		0b010101000000000000000000, //^
		0b000000000000111000000000, //_
		0b100100000000000000000000, //`
		0b000110011101111000000000, //a
		0b100110101101110000000000,
		0b000011100100011000000000,
		0b001011101101011000000000,
		0b000011101110011000000000,
		0b001010111010010000000000,
		0b000011101111001010000000,
		0b100110101101101000000000,
		0b101110000000000000000000,
		0b001000001001101010000000,
		0b100101110110101000000000,
		0b110010010010111000000000,
		0b000111111111101000000000,
		0b000110101101101000000000,
		0b000010101101010000000000,
		0b000110101101110100000000,
		0b000011101101011001000000,
		0b000011100100100000000000,
		0b000011110011110000000000,
		0b010111010010011000000000,
		0b000101101101011000000000,
		0b000101101111010000000000,
		0b000101111111111000000000,
		0b000101010010101000000000,
		0b000101101011001010000000, 
		0b000111011110111000000000, //z
		0b011010100010011000000000, //{
		0b110110000000000000000000, //|
		0b110010001010110000000000, //}
		0b000001011010000000000000, //~
	};
	//the width of the glyph data, not nessesarily how much space it takes up on the screen
	const uint8_t glyph_width[] = {
		//3,
		0,1,3,4,3,3,4,1,2,2,3,3,2,3,1,3,3,2,3,3,3,3,3,3,3,3,1,2,3,3,3,3,
		4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,3,
		2,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,4
	};
	//displayed size of character (basically just glyph_width+1 except space)
	const uint8_t char_width[] = {
		//4,
		2,2,4,5,4,4,5,2,3,3,4,4,3,4,2,4,4,3,4,4,4,4,4,4,4,4,2,3,4,4,4,4,
		5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,3,4,4,
		3,4,4,4,4,4,4,4,4,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,4,5
	};
	
	const uint8_t line_height = 6;
}
